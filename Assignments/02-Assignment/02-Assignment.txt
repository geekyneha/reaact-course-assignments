-Theory

1 What is NPM?
- NPM is a package manager that lets us install and manage tools or libraries we need in or project. It's the standard repository for Javascript packages or libraries.


2. What is 'Parcel/Webpack'? Why do we need it?
- Parcel and Webpack are bundlers that combine all project files into one, optimize code(minify, compress, remove unused code), and make development process smoother with features like hot reload, caching, and debigging support.

3. What is 'parcel-cache'?
- Parcel uses caching to speed up development. It remembers previous build steps and stores the  in a folder (usually .parcel-cache) so it doesn't rebuild everything from scratch easy time.

4. What is 'npx'?
   npx is a command-line tool that runs Node packages without installing them globally -unlike npm which installs them first. 

5. What is the difference between 'dependencies' and 'devDependencies'?
   dependencies are packages your app nedds to run(production)
   devDependencies are packages used only during development, not in production. (like testing, building).
 
6- What is Tree Shaking?
   - Tree Shaking is the process used by bundlers like Parcel, webPack, vite to remove unused code from your project. like shaking a tree to let go off extra leaves.


7- What is 'Hot Module Replacement'?
  - Hot Module Replacement (HMR) update parts of the app instantly when we save, without refreshing te whole page. So you see changes immidiately when you save.

8- List down your favourite 5 superpowers of Parcel and describe any three of them.
   - File watching algorithm.
   - Image optimization.
   - Bundling.
   - Chunking.
   - Minification.
   - Consistent Hashing.
   - HMR (Hot Module Replacement).
   - Diagnostic.
   - Error handling.

   (i). File watching algorithm.
    - Parcel keep tracks of file changes and rebuilds only what's mecessory, making    development faster.

   (ii). Image Otimization.
    - It automatically comresses images to reduce fiel size without losing quality.

   (iii). Minification.
    - Parcel shrinks your code by removing extra spaces and comments, making file smaller and fasterto load.

9. What is .gitignore? What should we add and not add into it.
   .gitignore is a file that tells Git which files or folders to ignore and not push to Github.

   Files/folders that can be regenerated (like node_modules), build files, logs, env files and anything that bloats the repo or contains secrets.
   
   We should not add source code, config files like (package.json) and anything needed to run or build the project.

10. What is the difference between 'package.json' and 'package-lock.json'?
    - package.json lists the packags your project needs and their version ranges and contains ony top level dependencies .
    - package-lock.json records the exact versions installed t ensure consistent installs everytime . it contains full records of dependency tree. (All nested dependencies)

    -package.json can be created manually or by command like npm install and it is editable.
    -package-lock.json  is automatically generated by npm when installing pakages its not editable you cant;s make changes to it.
   

11. Why should I not modify 'package-lock.json'
   - Because it locks the exact versions of all packages and their dependencies to keep the app stable.
   - Changing manually can cause version confilcts or break the app.

12.What is 'node_modules'? Is it good idea to push that on git?
  - node_modules is a folder that holds all the packages and transitive dependencies (packages those packages need).

  - We don't push it to Github because it can be regenerated by running npm intall using package.json. Pushing it makes the repi large and messy.



13.What is the 'dist' folder?
- The 'dist' (distribution) folder is created when we build the app for production. it  contains optimized and minfied files. usually HTML, CSS and JS ready to be deployed.

14.What is 'browserLists'?
- browserLists is a config (often in package.json) that tells tool like Babel or PostCss whcih browsers and versions our app should support.

For example : "last 2  Chrome versions" ensures your app works on the two latest versions of Chrome.

* Read about diff bundlers: vite, webpack , parcel.

* Read about : ^ -caret and  ~ -tilda
- Caret (^) allows minor and patch updates.
 example :  ^1.2.3 allows 1.3.0 but nor 2.0.0

- Tilde (~) allows only patch updates .
example : ~1.2.3 allows 1.2.5 but not 1.3.0.
 
 Major updates (like 1.x.x to 2.x.x) are not allowed by either because they can break our app.

Read about script types in html (MDN docs)

- type  module ( for modern js ES6 allows import/export), importmap (Custom path mapping for modules.)

